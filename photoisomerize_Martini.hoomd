import numpy as np
import math
import os, sys
import hoomd
import gsd.hoomd
# both scripts have to be in same folder for this to work
from random_polymerMelt_maker import RandomPolymerMaker
import argparse
from pathlib import Path
import azobenzene_potentials
sys.path.append('/home/bj21/programs/')
from martini3 import molecules
from martini3 import init_cell
from martini3 import force_fields
import datetime
import csv


class Status:
    def __init__(self, simulation):
        self.simulation = simulation

    @property
    def seconds_remaining(self):
        try:
            return (
                self.simulation.final_timestep - self.simulation.timestep
            ) / self.simulation.tps
        except ZeroDivisionError:
            return 0

    @property
    def etr(self):
        return str(datetime.timedelta(seconds=self.seconds_remaining))

parser = argparse.ArgumentParser(description='Performs npt uniaxial deformation of a given system')

non_opt = parser.add_argument_group('mandatory arguments')

non_opt.add_argument('-i','--in', metavar='<gsd-file>',dest ='input_file', type=str,
                required = True, help = 'input trajectory *.gsd file')

# non_opt.add_argument('-AA','--AAmax', metavar='<int>',dest ='AAmax', type=int,
#                 required = True, help = 'Maximum DPD parameter to try for like interactions')

# non_opt.add_argument('-AB','--ABmax', metavar='<int>',dest ='ABmax', type=int,
#                 required = True, help = 'Maximum DPD parameter to try for unlike interactions')

opt = parser.add_argument_group('optional arguments')
opt.add_argument('-o','--out', metavar='<gsd-file>',dest ='output_file', type=str,
                required = False, help = 'output trajectory *.gsd file')

args = parser.parse_args()
input_gsd = Path(args.input_file)
if (args.output_file):
    output_file = Path(args.output_file)
else:
    if (args.input_file.rfind('/') != -1):
        output_file = f"iso_{args.input_file[(args.input_file.rfind('/')+1):]}"
    else:
        output_file = f"iso_{args.input_file}" \

#Output
path = input_gsd.parent.absolute()
if not os.path.exists(str(path) + "/iso/"):
    os.makedirs(str(path) + "/iso/")
out_string = output_file.replace('.gsd','')
gsd_file=str(path)+'/iso/%s.gsd'%(out_string)
log_file=str(path)+'/iso/%s.log'%(out_string)

#-----------------------------------------------------------------------------
#                              Parameterization
#-----------------------------------------------------------------------------

kT = 1
# volume_fraction = 0.55

# model parameters - masses are hardcoded in the polymerMelt Maker
bPEOPEO = 0.9609
bPEOBenz = 0.9609
bBenzNN = 0.9609
bPEOEndgroup = 0.9609
sPEOPEO = 1.0
sBenzBenz = 1.0
sNNNN = 1.0
sEndgroupEndgroup = 1.0
sPEOBenz = 0.5*(sPEOPEO+sBenzBenz)
sPEONN = 0.5*(sPEOPEO+sNNNN)
sPEOEndgroup = 0.5*(sPEOPEO+sEndgroupEndgroup)
sBenzNN = 0.5*(sBenzBenz+sNNNN)
sBenzEndgroup = 0.5*(sBenzBenz+sEndgroupEndgroup)
sNNEndgroup = 0.5*(sNNNN+sEndgroupEndgroup)

ePEOPEO = 1.0
eBenzBenz = 1.0
eNNNN = 1.0
ePEOBenz = 2*ePEOPEO*eBenzBenz/(ePEOPEO+eBenzBenz)
ePEONN = 2*ePEOPEO*eNNNN/(ePEOPEO+eNNNN)
eBenzNN = 2*eBenzBenz*eNNNN/(eBenzBenz+eNNNN)

#-----------------------------------------------------------------------
#                               Change angle types
#-----------------------------------------------------------------------
with gsd.hoomd.open(name=input_gsd, mode='r') as f:
    frame = f[-1]
    f.close()

path = input_gsd.parent.absolute()

# Find the IDs of the trans and cis isomer angles
transID = -1
cisID = -1
with open(str(path) + '/angles.csv', "r") as file:
    reader = csv.reader(file)
    for row in reader:
        if row[1] == '30' and math.isclose(float(row[2]),3.14159265358979):
            transID = int(row[0])
        if row[1] == '30' and math.isclose(float(row[2]),1.047197551):
            cisID = int(row[0])

# print(transID)
# print(cisID)
# print(frame.angles.types)
if cisID == -1:
    #add the cis azo angle definition to the csv
    with open(str(path) + '/angles.csv', "a") as file:
        writer = csv.writer(file, quoting=csv.QUOTE_ALL)
        writer.writerow([len(frame.angles.types), 30, 1.047197551])
if not cisID in frame.angles.types:
    #add the cis azo angle definition to the frame.angles.types
    cisID = len(frame.angles.types)
    frame.angles.types.append(str(len(frame.angles.types)))

# print(transID)
# print(cisID)
# print(frame.angles.types)

# transID = np.where(np.array(frame.angles.types) == 'transAzo')[0][0]
# cisID = np.where(np.array(frame.angles.types) == 'cisAzo')[0][0]
cisID_arr = [cisID]*len(frame.angles.typeid)
frame.angles.typeid[np.where(frame.angles.typeid == transID)] = cisID
# # frame.angles.typeid = np.where(frame.angles.typeid != transID,cisID_arr,frame.angles.typeid)

#-----------------------------------------------------------------------
#                               Setup system
#-----------------------------------------------------------------------

try:
    device = hoomd.device.GPU()
except:
    device = hoomd.device.CPU()
device.notice_level = 2
sim = hoomd.Simulation(device=device, seed=16)

# sim.create_state_from_gsd(filename=gsd_file)
sim.create_state_from_snapshot(frame)

#-----------------------------------------------------------------------
#                               Output
#-----------------------------------------------------------------------

thermodynamic_properties = hoomd.md.compute.ThermodynamicQuantities(filter=hoomd.filter.All())
sim.operations.computes.append(thermodynamic_properties)

logger = hoomd.logging.Logger(categories=['scalar'])
logger.add(sim, quantities=['timestep'])
logger.add(thermodynamic_properties, quantities=['kinetic_temperature','pressure','kinetic_energy','potential_energy','volume'])
# table_stdout = hoomd.write.Table(trigger=hoomd.trigger.Periodic(1000),logger=logger)
table_file = hoomd.write.Table(trigger=hoomd.trigger.Periodic(1000),logger=logger, output=open(log_file,'a'))
# sim.operations.writers.append(table_stdout)
sim.operations.writers.append(table_file)

with gsd.hoomd.open(name=gsd_file, mode='w') as f:
    f.append(frame)
# gsd_writer = hoomd.write.GSD(filename=gsd_file,
#                                     trigger=hoomd.trigger.Periodic(10000),
#                                     dynamic=['property','momentum','topology','attribute'],
#                                     mode='wb')
# sim.operations.writers.append(gsd_writer)

#-----------------------------------------------------------------------
#                        Particle interactions
#-----------------------------------------------------------------------

'''
path = input_gsd.parent.absolute()

# change trans isomer angle to cis.

#read the current angles.csv and replace the one that corresponds to the trans azobenzene
tmp = []
with open(str(path) + '/angles.csv', "r") as file:
    reader = csv.reader(file)
    for row in reader:
        if row[1] == '30' and row[2] == '3.141592653589793':
            tmp.append([row[0],'30', '1.047197551'])
        else:
            tmp.append(row)

#overwrite the old angles.csv
with open(str(path) + '/angles.csv', "w") as file:
    writer = csv.writer(file, quoting=csv.QUOTE_ALL)
    for item in tmp:
        writer.writerow(item)
'''

lj, coulomb, bond_harmonic, angle_forces, dihedrals,improper,rigid = force_fields.forces_from_gsd(
        str(path)+'/', str(input_gsd.name)
    )

#-----------------------------------------------------------------------
#                                Run
#-----------------------------------------------------------------------
# timestep= 0.04 is from original Groot,Warren DPD publication. They used density=3, our density is much lower

nve = hoomd.md.methods.ConstantVolume(filter=hoomd.filter.All())
fire = hoomd.md.minimize.FIRE(dt=0.005,
                                    force_tol=1e-2,
                                    angmom_tol=1e-2,
                                    energy_tol=1e-4)

fire.methods.append(nve)

for t0 in np.linspace(math.pi,math.pi/3,15):
    # angle_forces.params[str(0)] = dict(k=100.0,t0=t0)
    angle_forces.params[str(cisID)] = dict(k=100.0,t0=t0)
    fire.forces = [lj,bond_harmonic,angle_forces] #dihedrals
    sim.operations.integrator = fire
    print(t0)
    sim.run(1e4)
print('fire harmonic, lj, angle done')

fire.forces = []
del fire

print("Simulation initialized. Now testing Langevin")
integrator = hoomd.md.Integrator(dt=0.005)

langevin = hoomd.md.methods.Langevin(filter=hoomd.filter.All(),kT=kT,default_gamma=0.1)

integrator.methods.append(langevin)
integrator.forces = [lj,bond_harmonic,angle_forces]

sim.operations.integrator = integrator
sim.state.thermalize_particle_momenta(filter=hoomd.filter.All(),kT=kT)

sim.run(1e5)

hoomd.write.GSD.write(state=sim.state,mode='wb',filename=gsd_file)
print("writing gsd file to:",gsd_file)
